@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Swarojgaar.Data
@using System.Security.Claims
@model List<Job>
@inject ApplicationDbContext _dbContext
@inject Microsoft.AspNetCore.Identity.UserManager<User> UserManager


@if (User.Identity.IsAuthenticated)
{
    
    var user = await UserManager.GetUserAsync(User);
    var roles = await UserManager.GetRolesAsync(user);
    
    @if (roles.Contains("Job_Seeker"))
    {
        <h1 style="margin-left: 12px; margin-right: 10px">Recommended Jobs✨</h1>
        @if (Model.Count == 0)
        {
            <div class="text-success text-center" role="alert">
                <h2 class="alert alert-success mb-5 mt-3">Please Apply to some jobs to get recommendations!</h2>
            </div>
        }
        else
        {
            <div class="row">

                @foreach (var item in Model)
                {
                    var currentPoster = UserManager.FindByIdAsync(item.UserId).Result;
                    <div class="col-lg-4 col-md-1 col-sm-4 col-xs-1">
                        <div class="box-part text-center cards rounded-3">
                            <img src="/profile/@currentPoster.IdentityImage" style="height: 60px; width: 60px; object-fit: cover; border-radius: 50%;" />
                            <div class="text text-success">
                                <h5>@Html.DisplayFor(modelItem => currentPoster.FirstName) @Html.DisplayFor(modelItem => currentPoster.LastName)</h5>
                            </div>
                            <div class="title">
                                <h3>@Html.DisplayFor(modelItem => item.Title)</h3>
                            </div>
                            <div class="text">
                                <span>@Html.DisplayFor(modelItem => item.JobSummary)</span>
                            </div>
                            <div role="group" class="w-60 btn-group">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    @if (roles.Contains("Admin") || roles.Contains("Job_Provider"))
                                    {
                                        <a class="btn btn-primary mx-1 rounded" asp-controller="Home" asp-action="Detail" asp-route-id="@item.EncryptedJobId"><i class="fa-solid fa-magnifying-glass"></i> View Detail</a>

                                    }
                                    else
                                    {
                                        // Implement this function to check if the user has applied
                                        var hasApplied = CheckIfUserApplied(item.JobId);
                                        var hasSaved = CheckIfUserSaved(item.JobId); // Implement this function to check if the user has saved
                                        if (hasApplied)
                                        {
                                            <a class="btn btn-success mx-1 rounded" asp-controller="JobApplication" asp-action="Index"><i class="fas fa-check-circle"></i> Applied</a>
                                        }

                                        if (hasSaved && !hasApplied)
                                        {
                                            //the logic to remove the loophole of saved job when applied from homepage
                                            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                                            var existingSaved = _dbContext.SavedJobs
                                            .FirstOrDefault(j => j.JobId == item.JobId && j.UserId == userId);

                                            <a class="btn btn-primary mx-1 rounded" asp-controller="SaveJob" asp-action="Index"><i class="fas fa-bookmark"></i> Saved</a>
                                            <a asp-controller="SaveJob" asp-action="ApplyAndRemove" asp-route-savedJobId="@existingSaved.SavedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>

                                        }

                                        if (!hasApplied && !hasSaved)
                                        {
                                            <a asp-controller="SaveJob" asp-action="SaveJob" asp-route-id="@item.EncryptedJobId" class="btn btn-primary mx-1 rounded"><i class="far fa-bookmark"></i> Save</a>
                                            <a asp-controller="JobApplication" asp-action="CreateJobApplication" asp-route-id="@item.EncryptedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>
                                        }
                                    }

                                }
                                @if (!User.Identity.IsAuthenticated)
                                {
                                    <a asp-controller="SaveJob" asp-action="SaveJob" asp-route-id="@item.EncryptedJobId" class="btn btn-primary mx-1 rounded"><i class="far fa-bookmark"></i> Save</a>
                                    <a asp-controller="JobApplication" asp-action="CreateJobApplication" asp-route-id="@item.EncryptedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }


}


@functions {
    // Implement this function to check if the user has applied for a specific job
    bool CheckIfUserApplied(int jobId)
    {
        if (User.Identity.IsAuthenticated)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Example: Check if there's an existing job application for the user and job
            var existingApplication = _dbContext.JobApplications
                .FirstOrDefault(j => j.JobId == jobId && j.UserId == userId);

            return existingApplication != null;
        }

        return false;
    }
    // Implement this function to check if the user has saved for a specific job
    bool CheckIfUserSaved(int jobId)
    {
        if (User.Identity.IsAuthenticated)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Example: Check if there's an existing job application for the user and job
            var existingSaved = _dbContext.SavedJobs
                .FirstOrDefault(j => j.JobId == jobId && j.UserId == userId);

            return existingSaved != null;
        }

        return false;
    }
}
