@* @model List<Swarojgaar.ViewModel.JobVM.GetAllJobsVM>
<script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css"/>

<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-lg-4 col-md-1 col-sm-4 col-xs-1">
            <div class="box-part text-center cards">
                <h1>🔥</h1>
                <div class="title">
                    <h4>@Html.DisplayFor(modelItem => item.Title)</h4>
                </div>
                <div class="text">
                    <span>@Html.DisplayFor(modelItem => item.Description)</span>
                </div>
                <div role="group" class="w-60 btn-group">
                    <a asp-controller="SaveJob" asp-action="SaveJob" asp-route-id="@item.JobId" class="btn btn-primary mx-1 rounded">Save</a>
                    <a asp-controller="JobApplication" asp-action="CreateJobApplication" asp-route-id="@item.JobId" class="btn btn-success mx-1 rounded">Apply</a>
                </div>
            </div>
        </div>
    }
</div>

 *@

@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Swarojgaar.Data
@model List<Swarojgaar.ViewModel.JobVM.GetAllJobsVM>
@inject ApplicationDbContext _dbContext
@inject Microsoft.AspNetCore.Identity.UserManager<IdentityUser> UserManager

<script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-lg-4 col-md-1 col-sm-4 col-xs-1">
            <div class="box-part text-center cards">
                <h1>🔥</h1>
                <div class="title">
                    <h4>@Html.DisplayFor(modelItem => item.Title)</h4>
                </div>
                <div class="text">
                    <span>@Html.DisplayFor(modelItem => item.Description)</span>
                </div>
                <div role="group" class="w-60 btn-group">
                    @if (User.Identity.IsAuthenticated)
                    {
                        var user = await UserManager.GetUserAsync(User);
                        var roles = await UserManager.GetRolesAsync(user);
                        @if (roles.Contains("Admin") || roles.Contains("Job_Provider"))
                        {
                            <a class="btn btn-primary mx-1 rounded" asp-controller="Home" asp-action="Detail" asp-route-id="@item.EncryptedJobId"><i class="fa-solid fa-magnifying-glass"></i> View Detail</a>

                        }
                        else
                        {
                            // Implement this function to check if the user has applied
                            var hasApplied = CheckIfUserApplied(item.JobId);
                            var hasSaved = CheckIfUserSaved(item.JobId); // Implement this function to check if the user has saved
                            if (hasApplied)
                            {
                                <a class="btn btn-success mx-1 rounded" asp-controller="JobApplication" asp-action="Index"><i class="fas fa-check-circle"></i> Applied</a>
                            }
                            if (hasSaved && !hasApplied)
                            {
                                //the logic to remove the loophole of saved job when applied from homepage
                                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                                var existingSaved = _dbContext.SavedJobs
                                .FirstOrDefault(j => j.JobId == item.JobId && j.UserId == userId);

                                <a class="btn btn-primary mx-1 rounded" asp-controller="SaveJob" asp-action="Index"><i class="fas fa-bookmark"></i> Saved</a>
                                <a asp-controller="SaveJob" asp-action="ApplyAndRemove" asp-route-savedJobId="@existingSaved.SavedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>

                            }
                            if (!hasApplied && !hasSaved)
                            {
                                <a asp-controller="SaveJob" asp-action="SaveJob" asp-route-id="@item.EncryptedJobId" class="btn btn-primary mx-1 rounded"><i class="far fa-bookmark"></i> Save</a>
                                <a asp-controller="JobApplication" asp-action="CreateJobApplication" asp-route-id="@item.EncryptedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>
                            }
                        }
                        
                    }
                    @if (!User.Identity.IsAuthenticated)
                    {
                        <a asp-controller="SaveJob" asp-action="SaveJob" asp-route-id="@item.EncryptedJobId" class="btn btn-primary mx-1 rounded"><i class="far fa-bookmark"></i> Save</a>
                        <a asp-controller="JobApplication" asp-action="CreateJobApplication" asp-route-id="@item.EncryptedJobId" class="btn btn-success mx-1 rounded"><i class="far fa-check-circle"></i> Apply</a>
                    }

                </div>
            </div>
        </div>
    }
</div>

@functions {
    // Implement this function to check if the user has applied for a specific job
    bool CheckIfUserApplied(int jobId)
    {
        if (User.Identity.IsAuthenticated)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Example: Check if there's an existing job application for the user and job
            var existingApplication = _dbContext.JobApplications
                .FirstOrDefault(j => j.JobId == jobId && j.UserId == userId);

            return existingApplication != null;
        }

        return false;
    }
    // Implement this function to check if the user has saved for a specific job
    bool CheckIfUserSaved(int jobId)
    {
        if (User.Identity.IsAuthenticated)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Example: Check if there's an existing job application for the user and job
            var existingSaved = _dbContext.SavedJobs
                .FirstOrDefault(j => j.JobId == jobId && j.UserId == userId);

            return existingSaved != null;
        }

        return false;
    }
}
